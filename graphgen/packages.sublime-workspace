{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dict",
				"dictNodes_listTrials_arraySpikeTimes"
			],
			[
				"nod",
				"node_to_fit"
			],
			[
				"dic",
				"dictNodes_listTrials_arraySpikeTimes"
			],
			[
				"dictNod",
				"dictNode_arraySpikeTimes"
			],
			[
				"fea",
				"feasibility_adjustment"
			],
			[
				"new",
				"new_individual"
			],
			[
				"cma",
				"cmatrix"
			],
			[
				"avg",
				"avgNumSpikes"
			],
			[
				"neur",
				"neuron_parameter_dict"
			],
			[
				"neuron_",
				"neuron_noise_dict"
			],
			[
				"nea",
				"nearest_left-1"
			],
			[
				"bl",
				"block"
			],
			[
				"n",
				"nearest_right-1"
			],
			[
				"near",
				"nearest_right"
			],
			[
				"t",
				"t_fac"
			],
			[
				"tota",
				"total_cost"
			],
			[
				"tau",
				"tau_in"
			],
			[
				"ta",
				"tau_w"
			],
			[
				"V_",
				"V_th"
			],
			[
				"tot",
				"total_cost"
			],
			[
				"ini",
				"initial_centroid"
			],
			[
				"sub",
				"subgraph_nodes"
			],
			[
				"node",
				"node_to_fit"
			],
			[
				"edges",
				"edges_iter"
			],
			[
				"V",
				"V_reset"
			],
			[
				"w",
				"w_s"
			],
			[
				"t_",
				"t_fac"
			],
			[
				"E",
				"E_in"
			],
			[
				"t_r",
				"t_ref"
			],
			[
				"fal",
				"False"
			],
			[
				"par",
				"par_dict"
			],
			[
				"tau_syn",
				"tau_syn_in"
			],
			[
				"weig",
				"weight_scale"
			],
			[
				"syn",
				"syn_spec"
			],
			[
				"syna",
				"synapse_parameter_dict"
			],
			[
				"edg",
				"edges_iter"
			],
			[
				"weigh",
				"weight_key"
			],
			[
				"test",
				"test_syn"
			],
			[
				"neuron",
				"neuron_spike_trains"
			],
			[
				"input",
				"input_nodes"
			],
			[
				"to",
				"to_remove"
			],
			[
				"sel",
				"select_subgraph"
			],
			[
				"sugraph",
				"subgraph_nodes"
			],
			[
				"spike",
				"spike_generator"
			],
			[
				"conin",
				"coincidence_count"
			],
			[
				"coun",
				"coincidence_count"
			],
			[
				"arra",
				"arraySpikeTimes"
			],
			[
				"num",
				"num_trials"
			],
			[
				"num_",
				"num_test_blocks"
			],
			[
				"dictNodes",
				"dictNodes_listTrials_arraySpikeTimes"
			],
			[
				"noi",
				"noise_std"
			],
			[
				"nois",
				"noise_mean"
			],
			[
				"noise",
				"noise_std"
			],
			[
				"E_",
				"E_in"
			],
			[
				"delt",
				"delta_T"
			],
			[
				"fit",
				"fit_subgraph"
			],
			[
				"l_",
				"l_dictNode_to_GID"
			],
			[
				"all",
				"all_neurons"
			],
			[
				"nodes",
				"nodes_iter"
			],
			[
				"nest",
				"nest_ordered"
			],
			[
				"inh",
				"inh_neuron"
			],
			[
				"parr",
				"parrot_neuron"
			],
			[
				"neu",
				"neuron_parameter_dict"
			],
			[
				"inpu",
				"input_nodes"
			],
			[
				"Neur",
				"NeuronFittingSim"
			],
			[
				"lis",
				"listTest_data"
			],
			[
				"li",
				"listNumSpikes"
			],
			[
				"list",
				"listRate"
			],
			[
				"tmax",
				"tmax_by_block"
			],
			[
				"gid",
				"gid_node_to_fit"
			],
			[
				"bloc",
				"block_dictGID_spiketimes"
			],
			[
				"vali",
				"validation_data"
			],
			[
				"blo",
				"block_bins"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"in",
				"individual"
			],
			[
				"com1",
				"com1_durations_by_mu"
			],
			[
				"grid",
				"gridsize"
			],
			[
				"save",
				"save_object"
			],
			[
				"com1_",
				"com1_mus"
			],
			[
				"com2",
				"com2_results"
			],
			[
				"community",
				"community_data"
			],
			[
				"listM",
				"listMus_listResults"
			],
			[
				"com",
				"combined_avalanche_IEI"
			],
			[
				"av",
				"avalanche_IEI"
			],
			[
				"ava",
				"avalanche_size_distribution"
			],
			[
				"combined",
				"combined_avalanche_size_dist"
			],
			[
				"combi",
				"combined_avalanche_duration"
			],
			[
				"aval",
				"avalanche_duration"
			],
			[
				"comb",
				"combined_branching_values"
			],
			[
				"br",
				"branching_parameter"
			],
			[
				"combined_av",
				"combined_avalanche_IEI"
			],
			[
				"combined_aval",
				"combined_avalanche_duration"
			],
			[
				"combin",
				"combined_binned_spike_frequency"
			],
			[
				"cal",
				"calc_branching_parameter"
			],
			[
				"b",
				"branching_parameter"
			],
			[
				"bra",
				"branching_values"
			],
			[
				"branchin",
				"branching_parameter"
			],
			[
				"dura",
				"duration_counter"
			],
			[
				"dur",
				"duration_counter"
			],
			[
				"IEI",
				"IEI_counter"
			],
			[
				"is",
				"is_avalanche"
			],
			[
				"bin",
				"binned_spike_frequency"
			],
			[
				"calc",
				"calc_trial_spike_frequency"
			],
			[
				"sort",
				"sorted_listNoise_listMus_listResults"
			],
			[
				"neurl",
				"neural_network_model"
			],
			[
				"Res",
				"ResetNetwork"
			],
			[
				"state",
				"state_reset"
			],
			[
				"kern",
				"kernel_reset"
			],
			[
				"sign",
				"signal_community"
			],
			[
				"use",
				"use_communities"
			],
			[
				"spik",
				"spike_times"
			],
			[
				"signal",
				"signal_connection_ratio"
			],
			[
				"ts",
				"tsodyks"
			],
			[
				"synapse",
				"synapse_type"
			],
			[
				"signal_conn",
				"signal_connection_pars"
			],
			[
				"pr",
				"prefix"
			],
			[
				"Spik",
				"SpikeDetectorOutput_byTrial"
			],
			[
				"Vo",
				"VoltageDetectorOutput_byTrial"
			],
			[
				"voltage",
				"VoltageTraces"
			],
			[
				"data",
				"data_object"
			],
			[
				"Sav",
				"SaveDataToFile"
			],
			[
				"Plot",
				"PlotNetworkActivity"
			],
			[
				"y",
				"y_log"
			],
			[
				"x",
				"x_log"
			],
			[
				"stat",
				"static_synapse"
			],
			[
				"Volt",
				"VoltDetector"
			],
			[
				"neurons",
				"neurons_in"
			],
			[
				"N_",
				"N_E"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"Packa",
				"Preferences: Browse Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 155.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/silahtar/workspace/User_Packages/graphgen",
		"/home/silahtar/workspace/User_Packages/graphgen/graphgen",
		"/home/silahtar/workspace/User_Packages/graphgen/graphgen.egg-info",
		"/home/silahtar/workspace/User_Packages/neuralnetsim",
		"/home/silahtar/workspace/User_Packages/utilities"
	],
	"file_history":
	[
		"/home/silahtar/workspace/User_Packages/package_requirements.txt",
		"/home/silahtar/workspace/User_Packages/graphgen/graphgen/__init__.py",
		"/home/silahtar/workspace/User_Packages/graphgen/README.rst",
		"/home/silahtar/workspace/User_Packages/graphgen/graphgen/unweighted_directed_lfr_benchmark.py",
		"/home/silahtar/workspace/User_Packages/neuralnetsim/README.rst",
		"/home/silahtar/workspace/User_Packages/graphgen/setup.py",
		"/home/silahtar/workspace/User_Packages/graphgen/graphgen/weighted_directed_lfr_graph.py",
		"/home/silahtar/workspace/User_Packages/graphgen/.gitignore",
		"/home/silahtar/workspace/User_Packages/neuralnetsim/setup.py",
		"/home/silahtar/workspace/User_Packages/utilities/setup.py",
		"/home/silahtar/workspace/User_Packages/graphgen/MANIFEST.in",
		"/home/silahtar/workspace/User_Packages/utilities/utilities/__init__.py",
		"/home/silahtar/workspace/User_Packages/utilities/utilities/circuitutils.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/two_community_noise_model_block.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/CircuitUtilities.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/NeuralNetworkSimulator.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/model_neuron_fitter.py",
		"/home/silahtar/Desktop/deap_CMA-ES_test.py",
		"/home/silahtar/workspace/DiscreteESN/bigred2_mkPCPcommand_files.py",
		"/home/silahtar/workspace/User_Packages/utilities/utilities/listmanipulation.py",
		"/home/silahtar/workspace/User_Packages/utilities/utilities/fileio.py",
		"/home/silahtar/Desktop/test.py",
		"/home/silahtar/Desktop/test2.py",
		"/home/silahtar/Desktop/test3.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/network_analysis.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/ImprovedViolinPlot.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/violinplot_alt.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/optimal_modularity_diagram_block.py.old",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/two_community_block_model.py",
		"/home/silahtar/workspace/DiscreteESN/optimal_modularity_diagram_DESN.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/LSM_Modeler.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/optimal_modularity_diagram_block.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/CircuitGenerator.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/model_fitting_benchmark.py",
		"/home/silahtar/workspace/DiscreteESN/DESN_modeler.py",
		"/home/silahtar/workspace/DiscreteESN/DiscreteEchoStateNetwork.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/optimal_modularity_diagram_LFR.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/RunParallelNetworkSimulation.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/generate_weight_histogram_plot.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/generate_spike_train_plot.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/RunParallelLFR.py",
		"/home/silahtar/workspace/BeliefNet/BeliefNet-Src2/beliefNet-Py.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/RunParallelCircuitGenerators.py",
		"/home/silahtar/workspace/resources/LFR_Grapher/LFR_to_Gephi_converter.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/generate_artificial_optimal_modularity_phase_diagram.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/convert_nx_to_gexf.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/neuronal_slice_community_weight_fractions.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/CircuitChecker.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/test_community_size_difference_effects.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/Final Project/WeightedStochasticBlockModel.py",
		"/home/silahtar/workspace/BlockModel/SBM.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/KarstQscriptGenerator.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/generate_karst_processes.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/QscriptCircuitGenerator.py",
		"/home/silahtar/workspace/resources/LFR_Grapher/NetMap.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/GenerateOriginalSliceFolder.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/Final Project/EchoStateNetwork.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/community_simulator.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/NeuralMomentumModel.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/model_tester.py",
		"/home/silahtar/workspace/reference_code/subplots_demo.py",
		"/home/silahtar/workspace/BeliefNet/BeliefNet-Src/beliefNet-Py.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/timed_code_testing.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/CircuitGenerator.py.old2",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/WilsonCowenModel.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A3/SimulatedAnnealing.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A7/EchoStateNetwork.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A7/ESNTester.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/Objective.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A7/Objective.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A3/cardproblem.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A3/card_problem.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A5/a5.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/a6.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A5/NeuronModels.py",
		"/home/silahtar/Documents/grad_school/Neural_Modelling/Assignments/Assignment 5/model_training.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/shunting_behavior_analysis.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/SliceGraphChecker.py",
		"/home/silahtar/workspace/brain/code/neural_circuit_code/SliceGraphGenerator.py",
		"/home/silahtar/workspace/brain/code/neural_slice_code/network_analysis.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/EvolveReservoir.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/MackeyGlass.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/EchoStateNetwork.py",
		"/home/silahtar/workspace/SimCog/SimCog.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A3/SteadyStateGeneticAlgorithm.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A6/EvolveESN.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Assignments/A4/agent_based_ultimatum_game.py",
		"/home/silahtar/Documents/grad_school/Neural_Modelling/Assignments/Assignment 3/kohonen_map.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Segregation/Segregation/Segregation/sim.py",
		"/home/silahtar/Documents/grad_school/COGS-700/Segregation/Segregation/Segregation/city.py",
		"/home/silahtar/cworkspace/S-GA/main.cpp",
		"/home/silahtar/cworkspace/S-GA/SGAConcierge.h",
		"/home/silahtar/cworkspace/S-GA/SGAConcierge.cpp",
		"/home/silahtar/cworkspace/S-GA/SGABoolEvolve.cpp",
		"/home/silahtar/cworkspace/S-GA/SGABoolEvolve.h",
		"/home/silahtar/cworkspace/S-GA/example_parameter_file.par",
		"/home/silahtar/cworkspace/S-GA/SGALedger.h",
		"/home/silahtar/cworkspace/S-GA/SGALedger.cpp",
		"/home/silahtar/cworkspace/S-GA/SGABoolNet.cpp",
		"/home/silahtar/cworkspace/S-GA/SGABoolNet.h",
		"/home/silahtar/cworkspace/S-GA/CellularAutomata.cpp",
		"/home/silahtar/cworkspace/S-GA/CellularAutomata.h",
		"/home/silahtar/cworkspace/S-GA/SingleStepPredictor.cpp",
		"/home/silahtar/cworkspace/S-GA/SingleStepPredictor.h",
		"/home/silahtar/cworkspace/S-GA/tentmap_predictor.cpp",
		"/home/silahtar/cworkspace/S-GA/BinaryTentMap.cpp",
		"/home/silahtar/cworkspace/S-GA/BinaryTentMap.h",
		"/home/silahtar/cworkspace/S-GA/TentMap.h",
		"/home/silahtar/cworkspace/S-GA/TentMap.cpp",
		"/home/silahtar/cworkspace/S-GA/generate_karst_processes.py",
		"/home/silahtar/workspace/brain/code/bootstrapping_code/brain_bootstrapping.py",
		"/home/silahtar/workspace/ComputationalCA/src/compCA.py",
		"/home/silahtar/cworkspace/S-GA/SGASchemata.h",
		"/home/silahtar/cworkspace/S-GA/SGASchemata.cpp",
		"/home/silahtar/cworkspace/S-GA/SGAPopulation.cpp",
		"/home/silahtar/cworkspace/S-GA/SGAPopulation.h",
		"/home/silahtar/cworkspace/S-GA/test.cpp",
		"/home/silahtar/cworkspace/S-GA/SBESBestNet.out",
		"/home/silahtar/cworkspace/S-GA/timeseries_plotter.py",
		"/home/silahtar/workspace/AgentBasedModel/src/economic_model.py",
		"/home/silahtar/workspace/Utilities/listsorter.py",
		"/home/silahtar/workspace/Utilities/utilities.py",
		"/home/silahtar/examples.desktop",
		"/home/silahtar/cworkspace/image_processing_CNN/generate_filelist.py",
		"/home/silahtar/cworkspace/BeliefNet/ModelParameters.cpp",
		"/home/silahtar/cworkspace/S-GA/SGAConditionSet.h",
		"/home/silahtar/cworkspace/S-GA/SGAConditionSet.cpp",
		"/home/silahtar/cworkspace/S-GA/SGACondition.cpp"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>",
			"<open folders>,/home/silahtar/workspace",
			"<open folders>,/home/silahtar/workspace/brain",
			"<open folders>",
			"/home/silahtar/Documents/grad_school/COGS-700/Assignments/",
			"/home/silahtar/cworkspace/S-GA,<open folders>",
			"/home/silahtar/cworkspace/S-GA",
			"/home/silahtar/cworkspace/EvolutionaryAgents/SiteCode",
			"/home/silahtar/cworkspace/S-GA",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"CircuitUtilities",
			"NeuralNetworkSimulator",
			"t_rec",
			"t_fac",
			"synapse_type",
			"weight",
			"ConstructSignalElements",
			"synapse_parameter_dict",
			"ex_node_set",
			"neurons_ex",
			"self.N",
			"fill",
			"1000.0",
			"run",
			"print",
			"GetCommuni",
			"convertnodetonest",
			"self.input_neurons",
			"signal_communi",
			"print",
			"exh_neuron",
			"num_trials",
			"parameter_noise",
			"neuron_noise_dict",
			"neuron_parameters",
			"neuron_parameter_dict",
			"neuron_parameters",
			"neuron_param",
			"ex_neuron_parameters",
			"bins - 1",
			"bins-1",
			"ecdf",
			"[:",
			"[:1]",
			"[:1",
			"spike_train",
			"print",
			"neurons_in",
			"inhib_node_list",
			"plot",
			"isi",
			"SpikeDetectorOutput_byTrial",
			"GetCommunities",
			"signal_generator",
			"inhib_neuron_list",
			"exh_neuron",
			"exh_neurons",
			"ext_noise_connection_pars",
			"get_nodes_list",
			"Run_ComStim",
			"graph_prefix",
			"community_activation",
			"list_com_means.app",
			"first_spike_time",
			"Run_ComStim",
			"RunNester",
			"ContourPlot",
			"LFRwd_graph",
			"log_lin",
			"cm.Blues",
			"CreateNodes",
			"print",
			"community_hal",
			"sim_ts_dict_of_arrays",
			"write_gexf",
			"randomize_duration",
			"global_id",
			"SliceGraphChecker",
			"CheckCommunityDifferences",
			"din_in_x",
			"log_linspace",
			"log_lin",
			"result = pool.map(f, sequence)",
			"plot_neural_slices",
			"generate_nxgra",
			"plot_neural",
			"5",
			"cu",
			"self.bridge_",
			"bridge_mask",
			"AnnealCircuit",
			"NRMSE",
			"log_linspace",
			"community",
			"mfrom_device",
			"mhistogram",
			"mmake_plot",
			"dirlichlet",
			"nx.adjacency_matrix",
			"energy_eM",
			"ModularityEnergy",
			"current_modularity",
			"is_bridge",
			"gamma",
			"edges",
			"sys.float_info.min",
			".in_degree",
			"graph.out_degree",
			"graph.in_degree",
			"out_degree_dictNodes_bin_index",
			"current_dictBin_in_strengthRR",
			"temp_in_strength_dictNodes_bin_index",
			"dictNode_in_strengthRR",
			"temp_dictNode_in_strengthRR",
			"temp_in_strength_dictNodes_bin_index",
			"temp_listBins_freq_in_strength",
			"dictNodes_diff",
			"temp_dictNodes_diff",
			"temp_current_Sdiff",
			"temp_dictNode_instrength",
			"log_weight",
			"current_eSdiff",
			"dictNode_instrength",
			"self.current_out_degree",
			"self.current_in_degree",
			"self.current_out_strength",
			"self.current_in_strength",
			"multaplic",
			"log",
			"[self.weight",
			"print",
			"['weight']",
			"weight",
			"target_out_degree",
			"self.edge",
			"edge",
			"self.modularity",
			"intre"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"utilities",
			"tau_rec",
			"tau_fac",
			"inhib_node_list",
			"external_noise_connection_pars",
			"cm.BuPu",
			"dict_nodes_array_spiketimes",
			"dirichlet",
			"self.current_listBins_freq_out_degree",
			"self.current_listBins_freq_in_degree",
			"self.current_listBins_freq_out_strength",
			"self.current_listBins_freq_in_strength",
			"[self.weight_key]",
			"self.current_modularity",
			"input",
			"spectral_radius",
			"nCurrentIndex",
			"m_pcBestNetwork",
			"m_pPopulation",
			"GENERATIONS",
			"Generator",
			"generator",
			"Genarations",
			"genarations",
			"SGABoolEvolve",
			"rcOtherPopulation",
			"unSeed",
			"m_unSeed",
			"rcOtherBoolNet",
			"SGALedger",
			"boolnet",
			"BOOLNET",
			"BoolNet",
			"schemata",
			"SCHEMATA",
			"Schemata",
			"conditionset",
			"CONDITIONSET",
			"ConditionSet",
			"Condition",
			"CONDITION",
			"Condition",
			"rcOtherCondition",
			"SGACondition",
			"m_bMutateConditionVarProb",
			"unLocalSeed",
			"m_pvpcBlockContainer",
			"Term",
			"peer_influences_plot_pubversion",
			"energies_plot_pubversion",
			"zealot_densities_plot_pubversion",
			"time_to_noise",
			"time_to_sig"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "packages.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 363.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
